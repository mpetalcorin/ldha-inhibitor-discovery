{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8624b57a-0081-40ca-b119-d4bfe2bbeec0",
   "metadata": {},
   "source": [
    "# Model Card: LDHA Inhibitor Classifier\n",
    "\n",
    "## Overview\n",
    "This model predicts whether a given molecule (represented by its SMILES string) is likely to inhibit the LDHA enzyme, which plays a key role in cancer metabolism. It was trained using LightGBM on bioactivity data labeled as active or inactive.\n",
    "\n",
    "## Intended Use\n",
    "This model is intended for:\n",
    "- Early-stage virtual screening of potential LDHA inhibitors.\n",
    "- Educational purposes in cheminformatics and bioactivity prediction.\n",
    "\n",
    "Not intended for:\n",
    "- Clinical decision-making.\n",
    "- Replacing experimental validation.\n",
    "\n",
    "## Training Data\n",
    "**Sources**: BindingDB and ChEMBL  \n",
    "**Dataset**: `LDHA_inhibitors_SMOTE_balanced_with_SMILES.csv`  \n",
    "**Samples**: ~2,700 molecules with known LDHA activity and IC50 values.  \n",
    "**Class Balance**: Balanced using SMOTE (Synthetic Minority Oversampling Technique)  \n",
    "**Features**: Mordred descriptors (~1,600 calculated, top 100 selected via `f_classif`)\n",
    "\n",
    "## Model Details\n",
    "- **Type**: LightGBM Classifier\n",
    "- **Validation**: 5-Fold Cross-Validation\n",
    "- **Best AUC Score**: 0.991\n",
    "- **Test Accuracy**: >96%\n",
    "- **Input**: 100 Mordred descriptors (numerical)\n",
    "- **Output**: Binary classification (Active/Inactive) and LDHA inhibition probability\n",
    "\n",
    "## Interpretability\n",
    "- SHAP used to interpret feature contributions\n",
    "- Important features include top physicochemical and structural properties\n",
    "\n",
    "## Limitations\n",
    "- Performance may drop on completely novel chemical spaces\n",
    "- Assumes quality SMILES input and drug-likeness\n",
    "\n",
    "## Ethical Considerations\n",
    "- Should not be used to guide treatment decisions without experimental validation.\n",
    "\"\"\"\n",
    "\n",
    "# Define the content for data_sheet.md\n",
    "data_sheet_content = \"\"\"\n",
    "# Data Sheet: LDHA Inhibition Dataset\n",
    "\n",
    "## Motivation\n",
    "The dataset was created to support the development of AI models for identifying inhibitors of LDHA, an enzyme critical to the metabolism of many cancers. Inhibiting LDHA can potentially \"starve\" cancer cells, making this a target for anti-cancer therapies.\n",
    "\n",
    "## Dataset Composition\n",
    "- **Total Molecules**: ~2,700\n",
    "- **Labels**: Active (1), Inactive (0)\n",
    "- **Label Basis**: IC50 thresholds (active if < 1000 nM)\n",
    "- **SMILES Format**: Canonicalized chemical structures\n",
    "\n",
    "## Sources\n",
    "- **ChEMBL**: Curated bioactivity data for LDHA targets\n",
    "- **BindingDB**: IC50 values for LDHA inhibition\n",
    "\n",
    "## Processing Steps\n",
    "1. Remove duplicates and missing IC50 or SMILES\n",
    "2. Normalize IC50 and convert to pChEMBL where needed\n",
    "3. Label compounds as Active/Inactive\n",
    "4. Apply SMOTE for balancing actives/inactives\n",
    "5. Compute 1600+ Mordred descriptors (ignore 3D)\n",
    "6. Feature selection using ANOVA (f_classif) to retain top 100\n",
    "\n",
    "## Intended Use\n",
    "- Model training and benchmarking\n",
    "- Exploratory analysis for LDHA drug discovery\n",
    "- Educational demonstrations\n",
    "\n",
    "## Caveats\n",
    "- Biological activity is based on in vitro assays\n",
    "- Dataset may not generalize to unseen chemical spaces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27103b0f-da3d-425d-9ec1-00d4203adc2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "from rdkit import Chem\n",
    "from rdkit.Chem import Descriptors, Crippen, QED\n",
    "from mordred import Calculator, descriptors\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# --- Load model and preprocessing tools ---\n",
    "model = joblib.load(\"models/ldha_lightgbm_model.pkl\")\n",
    "scaler = joblib.load(\"models/scaler.pkl\")\n",
    "selector = joblib.load(\"models/selector.pkl\")\n",
    "descriptor_names = joblib.load(\"models/descriptor_names.pkl\")\n",
    "\n",
    "# --- Streamlit Page Setup ---\n",
    "st.set_page_config(page_title=\"LDHA Inhibitor Prediction\", layout=\"wide\")\n",
    "st.title(\"LDHA Inhibitor Predictor\")\n",
    "st.markdown(\"\"\"\n",
    "Upload SMILES strings to check if they are potential **LDHA inhibitors**.\n",
    "Weâ€™ll also compute drug-likeness scores like QED, LogP, MW, TPSA and Lipinski RO5.\n",
    "\"\"\")\n",
    "\n",
    "# --- Sidebar Input ---\n",
    "smiles_input = st.text_area(\"Paste SMILES (one per line):\", height=200)\n",
    "\n",
    "# --- Helper Functions ---\n",
    "def compute_descriptors(smiles_list):\n",
    "    calc = Calculator(descriptors, ignore_3D=True)\n",
    "    mols, valid_smiles = [], []\n",
    "    for smi in smiles_list:\n",
    "        mol = Chem.MolFromSmiles(smi)\n",
    "        if mol:\n",
    "            mols.append(mol)\n",
    "            valid_smiles.append(smi)\n",
    "    descs = [calc(m).fill_missing(0).asdict() for m in mols]\n",
    "    return pd.DataFrame(descs), valid_smiles, mols\n",
    "\n",
    "def druglikeness_properties(mol):\n",
    "    mw = Descriptors.MolWt(mol)\n",
    "    logp = Crippen.MolLogP(mol)\n",
    "    qed = QED.qed(mol)\n",
    "    tpsa = Descriptors.TPSA(mol)\n",
    "    ro5 = int((mw > 500) + (logp > 5) + (Descriptors.NumHDonors(mol) > 5) + (Descriptors.NumHAcceptors(mol) > 10))\n",
    "    return mw, logp, qed, tpsa, ro5\n",
    "\n",
    "# --- Prediction Logic ---\n",
    "if st.button(\"Predict\"):\n",
    "    if smiles_input.strip():\n",
    "        smiles_list = [s.strip() for s in smiles_input.splitlines() if s.strip()]\n",
    "        desc_df, valid_smiles, mols = compute_descriptors(smiles_list)\n",
    "\n",
    "        if len(valid_smiles) == 0:\n",
    "            st.warning(\"No valid SMILES found.\")\n",
    "        else:\n",
    "            try:\n",
    "                desc_df = desc_df[descriptor_names]\n",
    "                desc_scaled = scaler.transform(desc_df)\n",
    "                desc_selected = selector.transform(desc_scaled)\n",
    "\n",
    "                preds = model.predict(desc_selected)\n",
    "                probs = model.predict_proba(desc_selected)[:, 1]\n",
    "\n",
    "                results = []\n",
    "                for i, smi in enumerate(valid_smiles):\n",
    "                    mw, logp, qed, tpsa, ro5 = druglikeness_properties(mols[i])\n",
    "                    results.append({\n",
    "                        \"SMILES\": smi,\n",
    "                        \"LDHA_Prob\": round(probs[i], 3),\n",
    "                        \"Prediction\": \"Active\" if preds[i] == 1 else \"Inactive\",\n",
    "                        \"QED\": round(qed, 3),\n",
    "                        \"LogP\": round(logp, 3),\n",
    "                        \"MW\": round(mw, 1),\n",
    "                        \"TPSA\": round(tpsa, 1),\n",
    "                        \"RO5_Violations\": ro5\n",
    "                    })\n",
    "\n",
    "                df_results = pd.DataFrame(results)\n",
    "                st.success(f\"Predicted {len(df_results)} molecules.\")\n",
    "                st.dataframe(df_results)\n",
    "                csv = df_results.to_csv(index=False).encode(\"utf-8\")\n",
    "                st.download_button(\"Download Results\", data=csv, file_name=\"ldha_predictions.csv\", mime=\"text/csv\")\n",
    "            except Exception as e:\n",
    "                st.error(f\"Error: {e}\")\n",
    "    else:\n",
    "        st.warning(\"Please input SMILES.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
